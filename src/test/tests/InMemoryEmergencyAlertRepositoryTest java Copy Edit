package test.tests;

import core.EmergencyAlert;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import repositories.EmergencyAlertRepository;
import repositories.inmemory.InMemoryEmergencyAlertRepository;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryEmergencyAlertRepositoryTest {
    
    private EmergencyAlertRepository repository;
    
    @BeforeEach
    void setUp() {
        repository = new InMemoryEmergencyAlertRepository();
    }
    
    @Test
    void testSaveAndFindById() {
        EmergencyAlert alert = new EmergencyAlert("E123", "High", true);
        repository.save(alert);
        
        Optional<EmergencyAlert> found = repository.findById("E123");
        assertTrue(found.isPresent());
        assertEquals("High", found.get().getSeverity());
    }
    
    @Test
    void testFindAll() {
        repository.save(new EmergencyAlert("E123", "High", true));
        repository.save(new EmergencyAlert("E456", "Low", false));
        
        List<EmergencyAlert> alerts = repository.findAll();
        assertEquals(2, alerts.size());
    }
    
    @Test
    void testDelete() {
        EmergencyAlert alert = new EmergencyAlert("E123", "High", true);
        repository.save(alert);
        repository.delete("E123");
        
        assertFalse(repository.findById("E123").isPresent());
    }
    
    @Test
    void testFindBySeverity() {
        repository.save(new EmergencyAlert("E123", "High", true));
        repository.save(new EmergencyAlert("E456", "Low", false));
        
        List<EmergencyAlert> highAlerts = repository.findBySeverity("High");
        assertEquals(1, highAlerts.size());
    }
    
    @Test
    void testFindByEscalated() {
        repository.save(new EmergencyAlert("E123", "High", true));
        repository.save(new EmergencyAlert("E456", "Low", false));
        
        List<EmergencyAlert> escalatedAlerts = repository.findByEscalated(true);
        assertEquals(1, escalatedAlerts.size());
    }
}
